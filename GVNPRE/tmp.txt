871000
1121937
3193828
1588997
835106
1327314
3333574
3578417
4514819
5758855
5777067
5111368
7658899
6725579
5322157
8053981
5804290
10269647
7876715
9136283
10529051
5831252
10207236
10099711
9826141
9892563
12569578
17474273
12869503
15878616
18791654
15594475
14483484
10923020
17766092
20915251
15830790
17027807
17105796
20335860
16597323
18387155
14999058
21190295
16439391
21664430
19633684
24944832
17545649
24959744
25374676
24830907
22249334
26219737
21535935
26815872
25036755
26357784
23370359
29033977
22677309
31096177
31808444
28393262
31951783
21671672
30694527
26832872
40130766
29705774
32708024
27948847
29739370
28077439
28917140
28845923
45555937
26982296
39541713
33595851
35888871
32564751
33697197
29519106
44719885
39787313
35560804
39843880
41320466
39980149
36031278
35697169
36077848
39472126
36715923
39201552
35375117
36781447
48058098
51064499
Writing '.Bubblesort.dot'...
Writing '.main.dot'...
cond.end
before clean
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
  %2 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp ult i32 %biggest.0, %2
new
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
cond.true
before clean
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
new
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
cond.false
before clean
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
new
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
for.body
before clean
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
  %littlest.0 = phi i32 [ 2147483647, %entry ], [ %cond, %for.inc ]
  %0 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp ult i32 %littlest.0, %0
new
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
  %littlest.0 = phi i32 [ 2147483647, %entry ], [ %cond, %for.inc ]
while.body19
before clean
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx21 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom20
  %4 = load i32, i32* %arrayidx21, align 4
  %idxprom20 = sext i32 %i.0 to i64
  %arrayidx23 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom22
  %5 = load i32, i32* %arrayidx23, align 4
  %add = add nsw i32 %i.0, 1
  %idxprom22 = sext i32 %add to i64
  %cmp24 = icmp ugt i32 %4, %5
new
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx21 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom20
  %idxprom20 = sext i32 %i.0 to i64
  %arrayidx23 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom22
  %add = add nsw i32 %i.0, 1
  %idxprom22 = sext i32 %add to i64
while.cond17
before clean
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18 = icmp slt i32 %i.0, %top.0
new
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18 = icmp slt i32 %i.0, %top.0
while.body
before clean
i32 0
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18.expr = icmp slt i32 0, %top.0
new
i32 0
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18.expr = icmp slt i32 0, %top.0
if.end43
before clean
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
new
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
if.then41
before clean
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
new
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
while.end36.if.then41_crit_edge
before clean
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
new
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
lor.lhs.false.if.then41_crit_edge
before clean
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
new
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
lor.lhs.false.if.end43_crit_edge
before clean
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
new
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
lor.lhs.false
before clean
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %arrayidx39 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 4999
  %9 = load i32, i32* %arrayidx39, align 4
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
  %cmp40 = icmp ne i32 %9, %biggest.0
new
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %arrayidx39 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 4999
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
while.end36
before clean
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %arrayidx37 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 0
  %8 = load i32, i32* %arrayidx37, align 16
  %littlest.0 = phi i32 [ 2147483647, %entry ], [ %cond, %for.inc ]
  %cmp38 = icmp ne i32 %8, %littlest.0
new
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %arrayidx37 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 0
  %littlest.0 = phi i32 [ 2147483647, %entry ], [ %cond, %for.inc ]
while.cond
before clean
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp16 = icmp sgt i32 %top.0, 0
new
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp16 = icmp sgt i32 %top.0, 0
for.end
before clean
i32 4999
  %cmp16.expr = icmp sgt i32 4999, 0
new
i32 4999
  %cmp16.expr = icmp sgt i32 4999, 0
for.cond
before clean
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i1.0, 5000
new
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i1.0, 5000
entry
before clean
i32 0
  %cmp.expr = icmp slt i32 0, 5000
new
i32 0
  %cmp.expr = icmp slt i32 0, 5000
for.inc
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
new
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
cond.end14
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
new
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
cond.true10
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom11 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx12 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom11
new
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom11 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx12 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom11
cond.false13
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
new
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
cond.end
before clean
  %sortlist = alloca [5000 x i32], align 16
  %inc = add nsw i32 %i1.0, 1
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp.expr = icmp slt i32 %inc, 5000
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
  %cmp9 = icmp ult i32 %biggest.0, %2
  %2 = load i32, i32* %arrayidx8, align 4
new
  %sortlist = alloca [5000 x i32], align 16
  %inc = add nsw i32 %i1.0, 1
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp.expr = icmp slt i32 %inc, 5000
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
cond.true
before clean
  %sortlist = alloca [5000 x i32], align 16
  %inc = add nsw i32 %i1.0, 1
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp.expr = icmp slt i32 %inc, 5000
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
new
  %sortlist = alloca [5000 x i32], align 16
  %inc = add nsw i32 %i1.0, 1
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp.expr = icmp slt i32 %inc, 5000
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
cond.false
before clean
  %sortlist = alloca [5000 x i32], align 16
  %inc = add nsw i32 %i1.0, 1
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp.expr = icmp slt i32 %inc, 5000
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
new
  %sortlist = alloca [5000 x i32], align 16
  %inc = add nsw i32 %i1.0, 1
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp.expr = icmp slt i32 %inc, 5000
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
for.body
before clean
  %sortlist = alloca [5000 x i32], align 16
  %cmp4 = icmp ult i32 %littlest.0, %0
  %inc = add nsw i32 %i1.0, 1
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp.expr = icmp slt i32 %inc, 5000
  %littlest.0 = phi i32 [ 2147483647, %entry ], [ %cond, %for.inc ]
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %0 = load i32, i32* %arrayidx3, align 4
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
new
  %sortlist = alloca [5000 x i32], align 16
  %inc = add nsw i32 %i1.0, 1
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp.expr = icmp slt i32 %inc, 5000
  %littlest.0 = phi i32 [ 2147483647, %entry ], [ %cond, %for.inc ]
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
if.end
before clean
  %add35 = add nsw i32 %i.0, 1
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
new
  %add35 = add nsw i32 %i.0, 1
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
if.then
before clean
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %idxprom28 = sext i32 %add27 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx26 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom25
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %add35 = add nsw i32 %i.0, 1
  %arrayidx29 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom28
  %idxprom25 = sext i32 %i.0 to i64
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
new
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %idxprom28 = sext i32 %add27 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx26 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom25
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %add35 = add nsw i32 %i.0, 1
  %arrayidx29 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom28
  %idxprom25 = sext i32 %i.0 to i64
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
while.body19.if.end_crit_edge
before clean
  %add35 = add nsw i32 %i.0, 1
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
new
  %add35 = add nsw i32 %i.0, 1
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
while.body19
before clean
  %arrayidx21 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom20
  %arrayidx23 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom22
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %4 = load i32, i32* %arrayidx21, align 4
  %5 = load i32, i32* %arrayidx23, align 4
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %sortlist = alloca [5000 x i32], align 16
  %cmp24 = icmp ugt i32 %4, %5
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %add35 = add nsw i32 %i.0, 1
  %idxprom20 = sext i32 %i.0 to i64
  %idxprom22 = sext i32 %add to i64
new
  %arrayidx21 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom20
  %arrayidx23 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom22
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %sortlist = alloca [5000 x i32], align 16
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %add35 = add nsw i32 %i.0, 1
  %idxprom20 = sext i32 %i.0 to i64
  %idxprom22 = sext i32 %add to i64
while.end
before clean
  %cmp16.expr = icmp sgt i32 %sub, 0
  %sub = sub nsw i32 %top.0, 1
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
new
  %cmp16.expr = icmp sgt i32 %sub, 0
  %sub = sub nsw i32 %top.0, 1
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
while.cond17
before clean
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %cmp18 = icmp slt i32 %i.0, %top.0
while.body
before clean
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
i32 0
  %cmp18.expr = icmp slt i32 0, %top.0
if.end43
before clean
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
if.then41
before clean
  %add44 = add nsw i32 %run, 1
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %sortlist = alloca [5000 x i32], align 16
  %idxprom45 = sext i32 %add44 to i64
while.end36.if.then41_crit_edge
before clean
  %add44 = add nsw i32 %run, 1
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %sortlist = alloca [5000 x i32], align 16
  %idxprom45 = sext i32 %add44 to i64
lor.lhs.false.if.then41_crit_edge
before clean
  %add44 = add nsw i32 %run, 1
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %sortlist = alloca [5000 x i32], align 16
  %idxprom45 = sext i32 %add44 to i64
lor.lhs.false.if.end43_crit_edge
before clean
  %add44 = add nsw i32 %run, 1
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %sortlist = alloca [5000 x i32], align 16
  %idxprom45 = sext i32 %add44 to i64
lor.lhs.false
before clean
  %add44 = add nsw i32 %run, 1
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %sortlist = alloca [5000 x i32], align 16
  %idxprom45 = sext i32 %add44 to i64
  %arrayidx39 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 4999
  %9 = load i32, i32* %arrayidx39, align 4
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
  %cmp40 = icmp ne i32 %9, %biggest.0
while.end36
before clean
  %add44 = add nsw i32 %run, 1
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %sortlist = alloca [5000 x i32], align 16
  %idxprom45 = sext i32 %add44 to i64
  %arrayidx37 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 0
  %8 = load i32, i32* %arrayidx37, align 16
  %littlest.0 = phi i32 [ 2147483647, %entry ], [ %cond, %for.inc ]
  %cmp38 = icmp ne i32 %8, %littlest.0
while.cond
before clean
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp16 = icmp sgt i32 %top.0, 0
for.end
before clean
i32 4999
  %cmp16.expr = icmp sgt i32 4999, 0
for.cond
before clean
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i1.0, 5000
entry
before clean
  %cmp.expr = icmp slt i32 0, 5000
i32 0
for.inc
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
cond.end14
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
cond.true10
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom11 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx12 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom11
cond.false13
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
cond.end
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
  %cmp9 = icmp ult i32 %biggest.0, %2
  %2 = load i32, i32* %arrayidx8, align 4
cond.true
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
cond.false
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %sortlist = alloca [5000 x i32], align 16
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
for.body
before clean
  %inc = add nsw i32 %i1.0, 1
  %cmp.expr = icmp slt i32 %inc, 5000
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %arrayidx8 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom7
  %idxprom7 = sext i32 %i1.0 to i64
  %0 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp ult i32 %littlest.0, %0
  %sortlist = alloca [5000 x i32], align 16
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %for.inc ]
  %littlest.0 = phi i32 [ 2147483647, %entry ], [ %cond, %for.inc ]
if.end
before clean
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %add35 = add nsw i32 %i.0, 1
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
if.then
before clean
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %idxprom28 = sext i32 %add27 to i64
  %idxprom25 = sext i32 %i.0 to i64
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %arrayidx29 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom28
  %sortlist = alloca [5000 x i32], align 16
  %arrayidx26 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom25
  %add35 = add nsw i32 %i.0, 1
while.body19.if.end_crit_edge
before clean
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %add35 = add nsw i32 %i.0, 1
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
while.body19
before clean
  %arrayidx21 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom20
  %arrayidx23 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom22
  %i.0 = phi i32 [ 0, %while.body ], [ %add35, %if.end ]
  %4 = load i32, i32* %arrayidx21, align 4
  %5 = load i32, i32* %arrayidx23, align 4
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp18.expr = icmp slt i32 %add35, %top.0
  %sortlist = alloca [5000 x i32], align 16
  %cmp24 = icmp ugt i32 %4, %5
  %add35 = add nsw i32 %i.0, 1
  %idxprom20 = sext i32 %i.0 to i64
  %idxprom22 = sext i32 %add to i64
while.end
before clean
  %sub = sub nsw i32 %top.0, 1
  %cmp16.expr = icmp sgt i32 %sub, 0
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
for.end
before clean
for.cond
before clean
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
new
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
entry
before clean
i32 0
  %cmp.expr = icmp slt i32 0, 100
new
i32 0
  %cmp.expr = icmp slt i32 0, 100
for.inc
before clean
  %inc = add nsw i32 %i.0, 1
  %cmp.expr = icmp slt i32 %inc, 100
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
new
  %inc = add nsw i32 %i.0, 1
  %cmp.expr = icmp slt i32 %inc, 100
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
for.body
before clean
  %inc = add nsw i32 %i.0, 1
  %cmp.expr = icmp slt i32 %inc, 100
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
new
  %inc = add nsw i32 %i.0, 1
  %cmp.expr = icmp slt i32 %inc, 100
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
for.cond
before clean
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
entry
before clean
i32 0
  %cmp.expr = icmp slt i32 0, 100
for.inc
before clean
  %inc = add nsw i32 %i.0, 1
  %cmp.expr = icmp slt i32 %inc, 100
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
for.body
before clean
  %inc = add nsw i32 %i.0, 1
  %cmp.expr = icmp slt i32 %inc, 100
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
Writing '.Bubblesort.dot'...
Writing '.main.dot'...
871000
1121937
3193828
1588997
835106
1327314
3333574
3578417
4514819
5758855
5777067
5111368
7658899
6725579
5322157
8053981
5804290
10269647
7876715
9136283
10529051
5831252
10207236
10099711
9826141
9892563
12569578
17474273
12869503
15878616
18791654
15594475
14483484
10923020
17766092
20915251
15830790
17027807
17105796
20335860
16597323
18387155
14999058
21190295
16439391
21664430
19633684
24944832
17545649
24959744
25374676
24830907
22249334
26219737
21535935
26815872
25036755
26357784
23370359
29033977
22677309
31096177
31808444
28393262
31951783
21671672
30694527
26832872
40130766
29705774
32708024
27948847
29739370
28077439
28917140
28845923
45555937
26982296
39541713
33595851
35888871
32564751
33697197
29519106
44719885
39787313
35560804
39843880
41320466
39980149
36031278
35697169
36077848
39472126
36715923
39201552
35375117
36781447
48058098
51064499
Writing '.Bubblesort.dot'...
Writing '.main.dot'...
871000
1121937
3193828
1588997
835106
1327314
3333574
3578417
4514819
5758855
5777067
5111368
7658899
6725579
5322157
8053981
5804290
10269647
7876715
9136283
10529051
5831252
10207236
10099711
9826141
9892563
12569578
17474273
12869503
15878616
18791654
15594475
14483484
10923020
17766092
20915251
15830790
17027807
17105796
20335860
16597323
18387155
14999058
21190295
16439391
21664430
19633684
24944832
17545649
24959744
25374676
24830907
22249334
26219737
21535935
26815872
25036755
26357784
23370359
29033977
22677309
31096177
31808444
28393262
31951783
21671672
30694527
26832872
40130766
29705774
32708024
27948847
29739370
28077439
28917140
28845923
45555937
26982296
39541713
33595851
35888871
32564751
33697197
29519106
44719885
39787313
35560804
39843880
41320466
39980149
36031278
35697169
36077848
39472126
36715923
39201552
35375117
36781447
48058098
51064499

entry:
  %sortlist = alloca [5000 x i32], align 16
  br label %for.cond

for.cond:                                         ; preds = %cond.end14, %entry
  %biggest.0 = phi i32 [ 0, %entry ], [ %cond15, %cond.end14 ]
  %littlest.0 = phi i32 [ 2147483647, %entry ], [ %cond, %cond.end14 ]
  %i1.0 = phi i32 [ 0, %entry ], [ %inc, %cond.end14 ]
  %cmp = icmp slt i32 %i1.0, 5000
  br i1 %cmp, label %for.body, label %for.end, !prof !32

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand() #4
  %idxprom = sext i32 %i1.0 to i64
  %arrayidx = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom
  store i32 %call, i32* %arrayidx, align 4
  %cmp4 = icmp ult i32 %littlest.0, %call
  br i1 %cmp4, label %cond.true, label %cond.false, !prof !33

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %littlest.0, %cond.true ], [ %call, %cond.false ]
  %cmp9 = icmp ult i32 %biggest.0, %call
  br i1 %cmp9, label %cond.true10, label %cond.false13, !prof !34

cond.true10:                                      ; preds = %cond.end
  br label %cond.end14

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false13, %cond.true10
  %cond15 = phi i32 [ %call, %cond.true10 ], [ %biggest.0, %cond.false13 ]
  %inc = add nsw i32 %i1.0, 1
  br label %for.cond, !llvm.loop !35

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.end, %for.end
  %top.0 = phi i32 [ 4999, %for.end ], [ %sub, %while.end ]
  %cmp16 = icmp sgt i32 %top.0, 0
  br i1 %cmp16, label %while.body, label %while.end36, !prof !37

while.body:                                       ; preds = %while.cond
  br label %while.cond17

while.cond17:                                     ; preds = %if.end, %while.body
  %i.0 = phi i32 [ 0, %while.body ], [ %add, %if.end ]
  %cmp18 = icmp slt i32 %i.0, %top.0
  br i1 %cmp18, label %while.body19, label %while.end, !prof !38

while.body19:                                     ; preds = %while.cond17
  %idxprom20 = sext i32 %i.0 to i64
  %arrayidx21 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom20
  %0 = load i32, i32* %arrayidx21, align 4
  %add = add nsw i32 %i.0, 1
  %idxprom22 = sext i32 %add to i64
  %arrayidx23 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom22
  %1 = load i32, i32* %arrayidx23, align 4
  %cmp24 = icmp ugt i32 %0, %1
  br i1 %cmp24, label %if.then, label %while.body19.if.end_crit_edge, !prof !39

while.body19.if.end_crit_edge:                    ; preds = %while.body19
  br label %if.end

if.then:                                          ; preds = %while.body19
  store i32 %1, i32* %arrayidx21, align 4
  store i32 %0, i32* %arrayidx23, align 4
  br label %if.end

if.end:                                           ; preds = %while.body19.if.end_crit_edge, %if.then
  br label %while.cond17, !llvm.loop !40

while.end:                                        ; preds = %while.cond17
  %sub = sub nsw i32 %top.0, 1
  br label %while.cond, !llvm.loop !41

while.end36:                                      ; preds = %while.cond
  %arrayidx37 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 0
  %2 = load i32, i32* %arrayidx37, align 16
  %cmp38 = icmp ne i32 %2, %littlest.0
  br i1 %cmp38, label %while.end36.if.then41_crit_edge, label %lor.lhs.false, !prof !42

while.end36.if.then41_crit_edge:                  ; preds = %while.end36
  br label %if.then41

lor.lhs.false:                                    ; preds = %while.end36
  %arrayidx39 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 4999
  %3 = load i32, i32* %arrayidx39, align 4
  %cmp40 = icmp ne i32 %3, %biggest.0
  br i1 %cmp40, label %lor.lhs.false.if.then41_crit_edge, label %lor.lhs.false.if.end43_crit_edge, !prof !42

lor.lhs.false.if.end43_crit_edge:                 ; preds = %lor.lhs.false
  br label %if.end43

lor.lhs.false.if.then41_crit_edge:                ; preds = %lor.lhs.false
  br label %if.then41

if.then41:                                        ; preds = %lor.lhs.false.if.then41_crit_edge, %while.end36.if.then41_crit_edge
  %call42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  br label %if.end43

if.end43:                                         ; preds = %lor.lhs.false.if.end43_crit_edge, %if.then41
  %add44 = add nsw i32 %run, 1
  %idxprom45 = sext i32 %add44 to i64
  %arrayidx46 = getelementptr inbounds [5000 x i32], [5000 x i32]* %sortlist, i64 0, i64 %idxprom45
  %4 = load i32, i32* %arrayidx46, align 4
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %4)
  ret void

entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %cmp = icmp slt i32 %i.0, 100
  br i1 %cmp, label %for.body, label %for.end, !prof !32

for.body:                                         ; preds = %for.cond
  call void @Bubblesort(i32 %i.0)
  %inc = add nsw i32 %i.0, 1
  br label %for.cond, !llvm.loop !33

for.end:                                          ; preds = %for.cond
  ret i32 0
Writing '.Bubblesort.dot'...
Writing '.main.dot'...
871000
1121937
3193828
1588997
835106
1327314
3333574
3578417
4514819
5758855
5777067
5111368
7658899
6725579
5322157
8053981
5804290
10269647
7876715
9136283
10529051
5831252
10207236
10099711
9826141
9892563
12569578
17474273
12869503
15878616
18791654
15594475
14483484
10923020
17766092
20915251
15830790
17027807
17105796
20335860
16597323
18387155
14999058
21190295
16439391
21664430
19633684
24944832
17545649
24959744
25374676
24830907
22249334
26219737
21535935
26815872
25036755
26357784
23370359
29033977
22677309
31096177
31808444
28393262
31951783
21671672
30694527
26832872
40130766
29705774
32708024
27948847
29739370
28077439
28917140
28845923
45555937
26982296
39541713
33595851
35888871
32564751
33697197
29519106
44719885
39787313
35560804
39843880
41320466
39980149
36031278
35697169
36077848
39472126
36715923
39201552
35375117
36781447
48058098
51064499
rm: cannot remove '.': Is a directory
rm: cannot remove '..': Is a directory
