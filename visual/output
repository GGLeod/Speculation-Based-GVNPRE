102102102103104105106107108109110111111111112113114115116117118119120120120121122123124125126127128129129129130131132133134135136137138138138139140141142143144145146147147147148149150151152153154155156156156157158159160161162163164165165165166167168169170171172173174174174175176177178179180181182183183183184185186187188189190191Writing '.main.dot'...
begin
avaiableOut for each Basic Block 
Block: if.else
8   %rem = srem i32 %i.0, 10
16   %add3 = add nsw i32 %a.0, %call1
1   %call = call i32 @getchar()
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
6   %cmp = icmp slt i32 %i.0, 100
2   %call1 = call i32 @getchar()
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
10   %cmp2 = icmp ne i32 %rem, 1
17   %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add3)
Block: if.then
1   %call = call i32 @getchar()
2   %call1 = call i32 @getchar()
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
6   %cmp = icmp slt i32 %i.0, 100
8   %rem = srem i32 %i.0, 10
10   %cmp2 = icmp ne i32 %rem, 1
11   %add = add nsw i32 %a.0, 1
Block: for.body
1   %call = call i32 @getchar()
2   %call1 = call i32 @getchar()
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
6   %cmp = icmp slt i32 %i.0, 100
8   %rem = srem i32 %i.0, 10
10   %cmp2 = icmp ne i32 %rem, 1
Block: for.cond
1   %call = call i32 @getchar()
2   %call1 = call i32 @getchar()
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
6   %cmp = icmp slt i32 %i.0, 100
Block: entry
1   %call = call i32 @getchar()
2   %call1 = call i32 @getchar()
Block: for.end
1   %call = call i32 @getchar()
2   %call1 = call i32 @getchar()
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
6   %cmp = icmp slt i32 %i.0, 100
Block: for.inc
8   %rem = srem i32 %i.0, 10
14   %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add5)
15   %inc = add nsw i32 %i.0, 1
12   %a.1 = phi i32 [ %add, %if.then ], [ %a.0, %if.else ]
1   %call = call i32 @getchar()
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
6   %cmp = icmp slt i32 %i.0, 100
13   %add5 = add nsw i32 %a.1, %call1
2   %call1 = call i32 @getchar()
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
10   %cmp2 = icmp ne i32 %rem, 1
Block: if.end
8   %rem = srem i32 %i.0, 10
14   %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add5)
12   %a.1 = phi i32 [ %add, %if.then ], [ %a.0, %if.else ]
1   %call = call i32 @getchar()
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
6   %cmp = icmp slt i32 %i.0, 100
13   %add5 = add nsw i32 %a.1, %call1
2   %call1 = call i32 @getchar()
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
10   %cmp2 = icmp ne i32 %rem, 1
anticipateIn for each Basic Block 
Block: if.else
15   %inc = add nsw i32 %i.0, 1
20   %cmp.expr = icmp slt i32 %inc, 100
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
2   %call1 = call i32 @getchar()
16   %add3 = add nsw i32 %a.0, %call1
Block: if.then
15   %inc = add nsw i32 %i.0, 1
20   %cmp.expr = icmp slt i32 %inc, 100
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
11   %add = add nsw i32 %a.0, 1
2   %call1 = call i32 @getchar()
21   %add5.expr = add i32 %add, %call1
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
Block: for.body
15   %inc = add nsw i32 %i.0, 1
20   %cmp.expr = icmp slt i32 %inc, 100
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
2   %call1 = call i32 @getchar()
3   %a.0 = phi i32 [ %call, %entry ], [ %a.1, %for.inc ]
8   %rem = srem i32 %i.0, 10
10   %cmp2 = icmp ne i32 %rem, 1
Block: for.cond
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
6   %cmp = icmp slt i32 %i.0, 100
Block: entry
18 i32 0
19   %cmp.expr = icmp slt i32 0, 100
Block: for.end
Block: for.inc
15   %inc = add nsw i32 %i.0, 1
20   %cmp.expr = icmp slt i32 %inc, 100
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
Block: if.end
15   %inc = add nsw i32 %i.0, 1
20   %cmp.expr = icmp slt i32 %inc, 100
4   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
12   %a.1 = phi i32 [ %add, %if.then ], [ %a.0, %if.else ]
2   %call1 = call i32 @getchar()
13   %add5 = add nsw i32 %a.1, %call1
22
available out point of each value number0: 
1: if.end for.inc for.end entry for.cond for.body if.then if.else 
2: if.end for.inc for.end entry for.cond for.body if.then if.else 
3: if.end for.inc for.end for.cond for.body if.then if.else 
4: if.end for.inc for.end for.cond for.body if.then if.else 
5: 
6: if.end for.inc for.end for.cond for.body if.then if.else 
7: 
8: if.end for.inc for.body if.then if.else 
9: 
10: if.end for.inc for.body if.then if.else 
11: if.then 
12: if.end for.inc 
13: if.end for.inc 
14: if.end for.inc 
15: for.inc 
16: if.else 
17: if.else 
18: 
19: 
20: 
21: 
antipate in point of each value number0: 
1: 
2: if.end for.body if.then if.else 
3: for.body if.then if.else 
4: if.end for.inc for.cond for.body if.then if.else 
5: 
6: for.cond 
7: 
8: for.body 
9: 
10: for.body 
11: if.then 
12: if.end 
13: if.end 
14: 
15: if.end for.inc for.body if.then if.else 
16: if.else 
17: 
18: entry 
19: entry 
20: if.end for.inc for.body if.then if.else 
21: if.then 
valunumber: 0
0				0				
0				0				
min cut from 0 to 1
valunumber: 1
0				0				
0				0				
min cut from 0 to 1
valunumber: 2
0				0				
0				0				
min cut from 0 to 1
valunumber: 3
0				0				
0				0				
min cut from 0 to 1
valunumber: 4
entry to for.cond: 8 1.000000e+00
0				9				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
entry - for.cond
valunumber: 5
0				0				
0				0				
min cut from 0 to 1
valunumber: 6
entry to for.cond: 8 1.000000e+00
0				9				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
entry - for.cond
valunumber: 7
0				0				
0				0				
min cut from 0 to 1
valunumber: 8
for.cond to for.body: 808 9.900990e-01
0				801				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
for.cond - for.body
valunumber: 9
0				0				
0				0				
min cut from 0 to 1
valunumber: 10
for.cond to for.body: 808 9.900990e-01
0				801				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
for.cond - for.body
valunumber: 11
for.body to if.then: 800 9.000000e-01
0				720				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
for.body - if.then
valunumber: 12
if.else to if.end: 80 1.000000e+00
if.then to if.end: 720 1.000000e+00
0				81				0				0				0				
0				0				0				0				2147483647				
0				721				0				0				0				
2147483647				0				2147483647				0				0				
0				0				0				0				0				
min cut from 3 to 4
if.else - if.end
if.then - if.end
valunumber: 13
if.else to if.end: 80 1.000000e+00
if.then to if.end: 720 1.000000e+00
0				81				0				0				0				
0				0				0				0				2147483647				
0				721				0				0				0				
2147483647				0				2147483647				0				0				
0				0				0				0				0				
min cut from 3 to 4
if.else - if.end
if.then - if.end
valunumber: 14
0				0				
0				0				
min cut from 0 to 1
valunumber: 15
if.else to if.end: 80 1.000000e+00
if.then to if.end: 720 1.000000e+00
if.end to for.inc: 800 1.000000e+00
for.cond to for.body: 808 9.900990e-01
for.body to if.then: 800 9.000000e-01
for.body to if.else: 800 1.000000e-01
0				81				0				0				0				0				0				0				
0				0				0				801				0				0				0				0				
0				721				0				0				0				0				0				0				
0				0				0				0				0				0				0				2147483647				
0				0				0				0				0				801				0				0				
81				0				720				0				0				0				0				0				
0				0				0				0				2147483647				0				0				0				
0				0				0				0				0				0				0				0				
min cut from 6 to 7
for.cond - for.body
valunumber: 16
for.body to if.else: 800 1.000000e-01
0				81				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
for.body - if.else
valunumber: 17
0				0				
0				0				
min cut from 0 to 1
valunumber: 18
0				0				
0				0				
min cut from 0 to 1
valunumber: 19
0				0				
0				0				
min cut from 0 to 1
valunumber: 20
if.else to if.end: 80 1.000000e+00
if.then to if.end: 720 1.000000e+00
if.end to for.inc: 800 1.000000e+00
for.cond to for.body: 808 9.900990e-01
for.body to if.then: 800 9.000000e-01
for.body to if.else: 800 1.000000e-01
0				81				0				0				0				0				0				0				
0				0				0				801				0				0				0				0				
0				721				0				0				0				0				0				0				
0				0				0				0				0				0				0				2147483647				
0				0				0				0				0				801				0				0				
81				0				720				0				0				0				0				0				
0				0				0				0				2147483647				0				0				0				
0				0				0				0				0				0				0				0				
min cut from 6 to 7
for.cond - for.body
valunumber: 21
for.body to if.then: 800 9.000000e-01
0				720				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
for.body - if.then

if.else.split:                                    ; preds = %for.body
  %OptInsert_add3 = add nsw i32 %a.0, %call1
  br label %if.else


if.then.split:                                    ; preds = %if.then
  br label %if.end


if.else.split1:                                   ; preds = %if.else
  br label %if.end


if.then.split2:                                   ; preds = %for.body
  br label %if.then


for.body.split:                                   ; preds = %for.cond
  br label %for.body


entry.split:                                      ; preds = %entry
  br label %for.cond

if.then.split2 has dominance frontier:
if.end 
if.then has dominance frontier:
if.end 
if.else.split has dominance frontier:
if.end 
if.else.split1 has dominance frontier:
if.end 
if.else has dominance frontier:
if.end 
for.body.split has dominance frontier:
for.cond 
if.then.split has dominance frontier:
if.end 
for.body has dominance frontier:
for.cond 
if.end has dominance frontier:
for.cond 
for.inc has dominance frontier:
for.cond 

if.end:                                           ; preds = %if.else.split1, %if.then.split
  %a.1 = phi i32 [ %add, %if.then.split ], [ %a.0, %if.else.split1 ]
  %NewPhi_OptInsert_add3 = phi i32 
  %add5 = add nsw i32 %a.1, %call1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add5)
  br label %for.inc
Writing '.main.dot'...
Writing '.main.dot'...
