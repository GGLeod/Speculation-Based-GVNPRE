digraph "CFG for 'classic' function" {
	label="CFG for 'classic' function";

	Node0x55ebc2b5c640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{entry:\l  br label %entry.split\l}"];
	Node0x55ebc2b5c640 -> Node0x55ebc2b6d3e0;
	Node0x55ebc2b6d3e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{entry.split:                                      \l  br label %for.cond\l}"];
	Node0x55ebc2b6d3e0 -> Node0x55ebc2b6d430;
	Node0x55ebc2b6d430 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond:                                         \l  %i.0 = phi i32 [ 0, %entry.split ], [ %OptInsert_add, %for.inc ]\l  %cmp = icmp slt i32 %i.0, 100\l  br i1 %cmp, label %for.body.split, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x55ebc2b6d430:s0 -> Node0x55ebc2b6d480;
	Node0x55ebc2b6d430:s1 -> Node0x55ebc2b6d7f0;
	Node0x55ebc2b6d480 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.body.split:                                   \l  %OptInsert_add = add nsw i32 %i.0, 1\l  %OptInsert_div = sdiv i32 %i.0, 2\l  %OptInsert_rem = srem i32 %i.0, 100\l  %OptInsert_cmp4 = icmp sgt i32 %i.0, 90\l  br label %for.body\l}"];
	Node0x55ebc2b6d480 -> Node0x55ebc2b6d4d0;
	Node0x55ebc2b6d4d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.body:                                         \l  %cmp1 = icmp eq i32 %OptInsert_rem, 1\l  br i1 %cmp1, label %if.then.split, label %if.else.split\l|{<s0>T|<s1>F}}"];
	Node0x55ebc2b6d4d0:s0 -> Node0x55ebc2b6d520;
	Node0x55ebc2b6d4d0:s1 -> Node0x55ebc2b6d5c0;
	Node0x55ebc2b6d520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{if.then.split:                                    \l  %OptInsert_add92 = add nsw i32 %OptInsert_add, %OptInsert_div\l  br label %if.then\l}"];
	Node0x55ebc2b6d520 -> Node0x55ebc2b6d570;
	Node0x55ebc2b6d570 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{if.then:                                          \l  br label %if.end\l}"];
	Node0x55ebc2b6d570 -> Node0x55ebc2b6d660;
	Node0x55ebc2b6d5c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{if.else.split:                                    \l  %OptInsert_add9 = add nsw i32 %OptInsert_add, %OptInsert_div\l  br label %if.else\l}"];
	Node0x55ebc2b6d5c0 -> Node0x55ebc2b6d610;
	Node0x55ebc2b6d610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{if.else:                                          \l  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3\l... x i8]* @.str, i64 0, i64 0), i32 %OptInsert_add9)\l  br label %if.end\l}"];
	Node0x55ebc2b6d610 -> Node0x55ebc2b6d660;
	Node0x55ebc2b6d660 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{if.end:                                           \l  %NewPhi_OptInsert_add9 = phi i32 [ %OptInsert_add92, %if.then ], [\l... %OptInsert_add9, %if.else ]\l  br i1 %OptInsert_cmp4, label %if.then5, label %if.else8\l|{<s0>T|<s1>F}}"];
	Node0x55ebc2b6d660:s0 -> Node0x55ebc2b6d6b0;
	Node0x55ebc2b6d660:s1 -> Node0x55ebc2b6d700;
	Node0x55ebc2b6d6b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{if.then5:                                         \l  br label %if.end11\l}"];
	Node0x55ebc2b6d6b0 -> Node0x55ebc2b6d750;
	Node0x55ebc2b6d700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{if.else8:                                         \l  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8],\l... [3 x i8]* @.str, i64 0, i64 0), i32 %NewPhi_OptInsert_add9)\l  br label %if.end11\l}"];
	Node0x55ebc2b6d700 -> Node0x55ebc2b6d750;
	Node0x55ebc2b6d750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{if.end11:                                         \l  br label %for.inc\l}"];
	Node0x55ebc2b6d750 -> Node0x55ebc2b6d7a0;
	Node0x55ebc2b6d7a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.inc:                                          \l  br label %for.cond, !llvm.loop !31\l}"];
	Node0x55ebc2b6d7a0 -> Node0x55ebc2b6d430;
	Node0x55ebc2b6d7f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{for.end:                                          \l  ret void\l}"];
}
