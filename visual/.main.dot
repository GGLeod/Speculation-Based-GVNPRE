digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x564414811640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{entry:\l  %call = call i32 @getchar()\l  %call1 = call i32 @getchar()\l  br label %entry.split\l}"];
	Node0x564414811640 -> Node0x564414820880;
	Node0x564414820880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{entry.split:                                      \l  br label %for.cond\l}"];
	Node0x564414820880 -> Node0x5644148208d0;
	Node0x5644148208d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond:                                         \l  %a.0 = phi i32 [ %call, %entry.split ], [ %a.1, %for.inc ]\l  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]\l  %cmp = icmp slt i32 %i.0, 100\l  br i1 %cmp, label %for.body.split, label %for.end, !prof !32\l|{<s0>T|<s1>F}}"];
	Node0x5644148208d0:s0 -> Node0x564414820920;
	Node0x5644148208d0:s1 -> Node0x564414820c40;
	Node0x564414820920 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.body.split:                                   \l  br label %for.body\l}"];
	Node0x564414820920 -> Node0x564414820970;
	Node0x564414820970 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.body:                                         \l  %rem = srem i32 %i.0, 10\l  %cmp2 = icmp ne i32 %rem, 1\l  br i1 %cmp2, label %if.then.split2, label %if.else.split, !prof !33\l|{<s0>T|<s1>F}}"];
	Node0x564414820970:s0 -> Node0x5644148209c0;
	Node0x564414820970:s1 -> Node0x564414820ab0;
	Node0x5644148209c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{if.then.split2:                                   \l  br label %if.then\l}"];
	Node0x5644148209c0 -> Node0x564414820a10;
	Node0x564414820a10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{if.then:                                          \l  %add = add nsw i32 %a.0, 1\l  br label %if.then.split\l}"];
	Node0x564414820a10 -> Node0x564414820a60;
	Node0x564414820a60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{if.then.split:                                    \l  br label %if.end\l}"];
	Node0x564414820a60 -> Node0x564414820ba0;
	Node0x564414820ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{if.else.split:                                    \l  %OptInsert_add3 = add nsw i32 %a.0, %call1\l  br label %if.else\l}"];
	Node0x564414820ab0 -> Node0x564414820b00;
	Node0x564414820b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{if.else:                                          \l  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8],\l... [3 x i8]* @.str, i64 0, i64 0), i32 %OptInsert_add3)\l  br label %if.else.split1\l}"];
	Node0x564414820b00 -> Node0x564414820b50;
	Node0x564414820b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{if.else.split1:                                   \l  br label %if.end\l}"];
	Node0x564414820b50 -> Node0x564414820ba0;
	Node0x564414820ba0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{if.end:                                           \l  %a.1 = phi i32 [ %add, %if.then.split ], [ %a.0, %if.else.split1 ]\l  %add5 = add nsw i32 %a.1, %call1\l  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8],\l... [3 x i8]* @.str, i64 0, i64 0), i32 %add5)\l  br label %for.inc\l}"];
	Node0x564414820ba0 -> Node0x564414820bf0;
	Node0x564414820bf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc:                                          \l  %inc = add nsw i32 %i.0, 1\l  br label %for.cond, !llvm.loop !34\l}"];
	Node0x564414820bf0 -> Node0x5644148208d0;
	Node0x564414820c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{for.end:                                          \l  ret i32 0\l}"];
}
