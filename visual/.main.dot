digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x55caafad3640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{entry:\l  %call = call i32 @getchar()\l  %call1 = call i32 @getchar()\l  br label %entry.split\l}"];
	Node0x55caafad3640 -> Node0x55caafae5240;
	Node0x55caafae5240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{entry.split:                                      \l  %OptInsert_add = add nsw i32 %call, %call1\l  br label %for.cond\l}"];
	Node0x55caafae5240 -> Node0x55caafae5290;
	Node0x55caafae5290 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond:                                         \l  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]\l  %cmp = icmp slt i32 %i.0, 100\l  br i1 %cmp, label %for.body.split, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x55caafae5290:s0 -> Node0x55caafae52e0;
	Node0x55caafae5290:s1 -> Node0x55caafae54c0;
	Node0x55caafae52e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.body.split:                                   \l  %OptInsert_rem = srem i32 %i.0, 10\l  br label %for.body\l}"];
	Node0x55caafae52e0 -> Node0x55caafae5330;
	Node0x55caafae5330 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.body:                                         \l  %cmp2 = icmp ne i32 %OptInsert_rem, 1\l  br i1 %cmp2, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x55caafae5330:s0 -> Node0x55caafae5380;
	Node0x55caafae5330:s1 -> Node0x55caafae53d0;
	Node0x55caafae5380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{if.then:                                          \l  br label %if.end\l}"];
	Node0x55caafae5380 -> Node0x55caafae5420;
	Node0x55caafae53d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{if.else:                                          \l  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8],\l... [3 x i8]* @.str, i64 0, i64 0), i32 %OptInsert_add)\l  br label %if.end\l}"];
	Node0x55caafae53d0 -> Node0x55caafae5420;
	Node0x55caafae5420 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{if.end:                                           \l  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8],\l... [3 x i8]* @.str, i64 0, i64 0), i32 %OptInsert_add)\l  br label %for.inc\l}"];
	Node0x55caafae5420 -> Node0x55caafae5470;
	Node0x55caafae5470 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.inc:                                          \l  %inc = add nsw i32 %i.0, 1\l  br label %for.cond, !llvm.loop !31\l}"];
	Node0x55caafae5470 -> Node0x55caafae5290;
	Node0x55caafae54c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{for.end:                                          \l  ret i32 0\l}"];
}
