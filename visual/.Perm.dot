digraph "CFG for 'Perm' function" {
	label="CFG for 'Perm' function";

	Node0x55f0464d9320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{entry:\l  store i32 0, i32* @pctr, align 4\l  br label %for.cond\l}"];
	Node0x55f0464d9320 -> Node0x55f0464d9960;
	Node0x55f0464d9960 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond:                                         \l  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ]\l  %cmp = icmp sle i32 %i.0, 5\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x55f0464d9960:s0 -> Node0x55f0464d99b0;
	Node0x55f0464d9960:s1 -> Node0x55f0464d9a50;
	Node0x55f0464d99b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.body:                                         \l  call void @Initialize()\l  call void @Permute(i32 7)\l  br label %for.inc\l}"];
	Node0x55f0464d99b0 -> Node0x55f0464d9a00;
	Node0x55f0464d9a00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.inc:                                          \l  %inc = add nsw i32 %i.0, 1\l  br label %for.cond, !llvm.loop !2\l}"];
	Node0x55f0464d9a00 -> Node0x55f0464d9960;
	Node0x55f0464d9a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{for.end:                                          \l  %0 = load i32, i32* @pctr, align 4\l  %cmp1 = icmp ne i32 %0, 43300\l  br i1 %cmp1, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x55f0464d9a50:s0 -> Node0x55f0464d9aa0;
	Node0x55f0464d9a50:s1 -> Node0x55f0464d9af0;
	Node0x55f0464d9aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{if.then:                                          \l  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8],\l... [17 x i8]* @.str, i64 0, i64 0))\l  br label %if.end\l}"];
	Node0x55f0464d9aa0 -> Node0x55f0464d9af0;
	Node0x55f0464d9af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{if.end:                                           \l  %1 = load i32, i32* @pctr, align 4\l  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8],\l... [4 x i8]* @.str.1, i64 0, i64 0), i32 %1)\l  ret void\l}"];
}
