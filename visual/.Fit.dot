digraph "CFG for 'Fit' function" {
	label="CFG for 'Fit' function";

	Node0x5654d0fbe4e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{entry:\l  br label %for.cond\l}"];
	Node0x5654d0fbe4e0 -> Node0x5654d0fbf1f0;
	Node0x5654d0fbf1f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond:                                         \l  %k.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]\l  %idxprom = sext i32 %i to i64\l  %arrayidx = getelementptr inbounds [13 x i32], [13 x i32]* @piecemax, i64 0,\l... i64 %idxprom\l  %0 = load i32, i32* %arrayidx, align 4\l  %cmp = icmp sle i32 %k.0, %0\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x5654d0fbf1f0:s0 -> Node0x5654d0fbf240;
	Node0x5654d0fbf1f0:s1 -> Node0x5654d0fbf420;
	Node0x5654d0fbf240 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.body:                                         \l  %idxprom1 = sext i32 %i to i64\l  %arrayidx2 = getelementptr inbounds [13 x [512 x i32]], [13 x [512 x i32]]*\l... @p, i64 0, i64 %idxprom1\l  %idxprom3 = sext i32 %k.0 to i64\l  %arrayidx4 = getelementptr inbounds [512 x i32], [512 x i32]* %arrayidx2,\l... i64 0, i64 %idxprom3\l  %1 = load i32, i32* %arrayidx4, align 4\l  %tobool = icmp ne i32 %1, 0\l  br i1 %tobool, label %if.then, label %if.end9\l|{<s0>T|<s1>F}}"];
	Node0x5654d0fbf240:s0 -> Node0x5654d0fbf290;
	Node0x5654d0fbf240:s1 -> Node0x5654d0fbf380;
	Node0x5654d0fbf290 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{if.then:                                          \l  %add = add nsw i32 %j, %k.0\l  %idxprom5 = sext i32 %add to i64\l  %arrayidx6 = getelementptr inbounds [512 x i32], [512 x i32]* @puzzl, i64 0,\l... i64 %idxprom5\l  %2 = load i32, i32* %arrayidx6, align 4\l  %tobool7 = icmp ne i32 %2, 0\l  br i1 %tobool7, label %if.then8, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x5654d0fbf290:s0 -> Node0x5654d0fbf2e0;
	Node0x5654d0fbf290:s1 -> Node0x5654d0fbf330;
	Node0x5654d0fbf2e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{if.then8:                                         \l  br label %return\l}"];
	Node0x5654d0fbf2e0 -> Node0x5654d0fbf470;
	Node0x5654d0fbf330 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d6524470",label="{if.end:                                           \l  br label %if.end9\l}"];
	Node0x5654d0fbf330 -> Node0x5654d0fbf380;
	Node0x5654d0fbf380 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{if.end9:                                          \l  br label %for.inc\l}"];
	Node0x5654d0fbf380 -> Node0x5654d0fbf3d0;
	Node0x5654d0fbf3d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.inc:                                          \l  %inc = add nsw i32 %k.0, 1\l  br label %for.cond, !llvm.loop !2\l}"];
	Node0x5654d0fbf3d0 -> Node0x5654d0fbf1f0;
	Node0x5654d0fbf420 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c7d7f070",label="{for.end:                                          \l  br label %return\l}"];
	Node0x5654d0fbf420 -> Node0x5654d0fbf470;
	Node0x5654d0fbf470 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{return:                                           \l  %retval.0 = phi i32 [ 0, %if.then8 ], [ 1, %for.end ]\l  ret i32 %retval.0\l}"];
}
