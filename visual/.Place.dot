digraph "CFG for 'Place' function" {
	label="CFG for 'Place' function";

	Node0x5654d0fc0240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{entry:\l  br label %for.cond\l}"];
	Node0x5654d0fc0240 -> Node0x5654d0fc16d0;
	Node0x5654d0fc16d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond:                                         \l  %k.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]\l  %idxprom = sext i32 %i to i64\l  %arrayidx = getelementptr inbounds [13 x i32], [13 x i32]* @piecemax, i64 0,\l... i64 %idxprom\l  %0 = load i32, i32* %arrayidx, align 4\l  %cmp = icmp sle i32 %k.0, %0\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x5654d0fc16d0:s0 -> Node0x5654d0fc1720;
	Node0x5654d0fc16d0:s1 -> Node0x5654d0fc1860;
	Node0x5654d0fc1720 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.body:                                         \l  %idxprom1 = sext i32 %i to i64\l  %arrayidx2 = getelementptr inbounds [13 x [512 x i32]], [13 x [512 x i32]]*\l... @p, i64 0, i64 %idxprom1\l  %idxprom3 = sext i32 %k.0 to i64\l  %arrayidx4 = getelementptr inbounds [512 x i32], [512 x i32]* %arrayidx2,\l... i64 0, i64 %idxprom3\l  %1 = load i32, i32* %arrayidx4, align 4\l  %tobool = icmp ne i32 %1, 0\l  br i1 %tobool, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x5654d0fc1720:s0 -> Node0x5654d0fc1770;
	Node0x5654d0fc1720:s1 -> Node0x5654d0fc17c0;
	Node0x5654d0fc1770 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{if.then:                                          \l  %add = add nsw i32 %j, %k.0\l  %idxprom5 = sext i32 %add to i64\l  %arrayidx6 = getelementptr inbounds [512 x i32], [512 x i32]* @puzzl, i64 0,\l... i64 %idxprom5\l  store i32 1, i32* %arrayidx6, align 4\l  br label %if.end\l}"];
	Node0x5654d0fc1770 -> Node0x5654d0fc17c0;
	Node0x5654d0fc17c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{if.end:                                           \l  br label %for.inc\l}"];
	Node0x5654d0fc17c0 -> Node0x5654d0fc1810;
	Node0x5654d0fc1810 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.inc:                                          \l  %inc = add nsw i32 %k.0, 1\l  br label %for.cond, !llvm.loop !2\l}"];
	Node0x5654d0fc1810 -> Node0x5654d0fc16d0;
	Node0x5654d0fc1860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{for.end:                                          \l  %idxprom7 = sext i32 %i to i64\l  %arrayidx8 = getelementptr inbounds [13 x i32], [13 x i32]* @class, i64 0,\l... i64 %idxprom7\l  %2 = load i32, i32* %arrayidx8, align 4\l  %idxprom9 = sext i32 %2 to i64\l  %arrayidx10 = getelementptr inbounds [4 x i32], [4 x i32]* @piececount, i64\l... 0, i64 %idxprom9\l  %3 = load i32, i32* %arrayidx10, align 4\l  %sub = sub nsw i32 %3, 1\l  %idxprom11 = sext i32 %i to i64\l  %arrayidx12 = getelementptr inbounds [13 x i32], [13 x i32]* @class, i64 0,\l... i64 %idxprom11\l  %4 = load i32, i32* %arrayidx12, align 4\l  %idxprom13 = sext i32 %4 to i64\l  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* @piececount, i64\l... 0, i64 %idxprom13\l  store i32 %sub, i32* %arrayidx14, align 4\l  br label %for.cond15\l}"];
	Node0x5654d0fc1860 -> Node0x5654d0fc18b0;
	Node0x5654d0fc18b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#dc5d4a70",label="{for.cond15:                                       \l  %k.1 = phi i32 [ %j, %for.end ], [ %inc24, %for.inc23 ]\l  %cmp16 = icmp sle i32 %k.1, 511\l  br i1 %cmp16, label %for.body17, label %for.end25\l|{<s0>T|<s1>F}}"];
	Node0x5654d0fc18b0:s0 -> Node0x5654d0fc1900;
	Node0x5654d0fc18b0:s1 -> Node0x5654d0fc1a40;
	Node0x5654d0fc1900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{for.body17:                                       \l  %idxprom18 = sext i32 %k.1 to i64\l  %arrayidx19 = getelementptr inbounds [512 x i32], [512 x i32]* @puzzl, i64\l... 0, i64 %idxprom18\l  %5 = load i32, i32* %arrayidx19, align 4\l  %tobool20 = icmp ne i32 %5, 0\l  br i1 %tobool20, label %if.end22, label %if.then21\l|{<s0>T|<s1>F}}"];
	Node0x5654d0fc1900:s0 -> Node0x5654d0fc19a0;
	Node0x5654d0fc1900:s1 -> Node0x5654d0fc1950;
	Node0x5654d0fc1950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{if.then21:                                        \l  br label %return\l}"];
	Node0x5654d0fc1950 -> Node0x5654d0fc1a90;
	Node0x5654d0fc19a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{if.end22:                                         \l  br label %for.inc23\l}"];
	Node0x5654d0fc19a0 -> Node0x5654d0fc19f0;
	Node0x5654d0fc19f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{for.inc23:                                        \l  %inc24 = add nsw i32 %k.1, 1\l  br label %for.cond15, !llvm.loop !4\l}"];
	Node0x5654d0fc19f0 -> Node0x5654d0fc18b0;
	Node0x5654d0fc1a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{for.end25:                                        \l  br label %return\l}"];
	Node0x5654d0fc1a40 -> Node0x5654d0fc1a90;
	Node0x5654d0fc1a90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{return:                                           \l  %retval.0 = phi i32 [ %k.1, %if.then21 ], [ 0, %for.end25 ]\l  ret i32 %retval.0\l}"];
}
