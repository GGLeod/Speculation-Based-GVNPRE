digraph "CFG for 'Mm' function" {
	label="CFG for 'Mm' function";

	Node0x55edd0ce1fc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{entry:\l  call void @Initrand()\l  call void @rInitmatrix([41 x float]* getelementptr inbounds ([41 x [41 x\l... float]], [41 x [41 x float]]* @rma, i64 0, i64 0))\l  call void @rInitmatrix([41 x float]* getelementptr inbounds ([41 x [41 x\l... float]], [41 x [41 x float]]* @rmb, i64 0, i64 0))\l  br label %for.cond\l}"];
	Node0x55edd0ce1fc0 -> Node0x55edd0cdf810;
	Node0x55edd0cdf810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{for.cond:                                         \l  %i.0 = phi i32 [ 1, %entry ], [ %inc7, %for.inc6 ]\l  %cmp = icmp sle i32 %i.0, 40\l  br i1 %cmp, label %for.body, label %for.end8\l|{<s0>T|<s1>F}}"];
	Node0x55edd0cdf810:s0 -> Node0x55edd0cdf860;
	Node0x55edd0cdf810:s1 -> Node0x55edd0cdfa40;
	Node0x55edd0cdf860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{for.body:                                         \l  br label %for.cond1\l}"];
	Node0x55edd0cdf860 -> Node0x55edd0cdf8b0;
	Node0x55edd0cdf8b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond1:                                        \l  %j.0 = phi i32 [ 1, %for.body ], [ %inc, %for.inc ]\l  %cmp2 = icmp sle i32 %j.0, 40\l  br i1 %cmp2, label %for.body3, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x55edd0cdf8b0:s0 -> Node0x55edd0cdf900;
	Node0x55edd0cdf8b0:s1 -> Node0x55edd0cdf9a0;
	Node0x55edd0cdf900 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.body3:                                        \l  %idxprom = sext i32 %i.0 to i64\l  %arrayidx = getelementptr inbounds [41 x [41 x float]], [41 x [41 x float]]*\l... @rmr, i64 0, i64 %idxprom\l  %idxprom4 = sext i32 %j.0 to i64\l  %arrayidx5 = getelementptr inbounds [41 x float], [41 x float]* %arrayidx,\l... i64 0, i64 %idxprom4\l  call void @rInnerproduct(float* %arrayidx5, [41 x float]* getelementptr\l... inbounds ([41 x [41 x float]], [41 x [41 x float]]* @rma, i64 0, i64 0), [41\l... x float]* getelementptr inbounds ([41 x [41 x float]], [41 x [41 x float]]*\l... @rmb, i64 0, i64 0), i32 %i.0, i32 %j.0)\l  br label %for.inc\l}"];
	Node0x55edd0cdf900 -> Node0x55edd0cdf950;
	Node0x55edd0cdf950 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc:                                          \l  %inc = add nsw i32 %j.0, 1\l  br label %for.cond1, !llvm.loop !2\l}"];
	Node0x55edd0cdf950 -> Node0x55edd0cdf8b0;
	Node0x55edd0cdf9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{for.end:                                          \l  br label %for.inc6\l}"];
	Node0x55edd0cdf9a0 -> Node0x55edd0cdf9f0;
	Node0x55edd0cdf9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{for.inc6:                                         \l  %inc7 = add nsw i32 %i.0, 1\l  br label %for.cond, !llvm.loop !4\l}"];
	Node0x55edd0cdf9f0 -> Node0x55edd0cdf810;
	Node0x55edd0cdfa40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{for.end8:                                         \l  %cmp9 = icmp slt i32 %run, 40\l  br i1 %cmp9, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x55edd0cdfa40:s0 -> Node0x55edd0cdfa90;
	Node0x55edd0cdfa40:s1 -> Node0x55edd0cdfae0;
	Node0x55edd0cdfa90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{if.then:                                          \l  %add = add nsw i32 %run, 1\l  %idxprom10 = sext i32 %add to i64\l  %arrayidx11 = getelementptr inbounds [41 x [41 x float]], [41 x [41 x\l... float]]* @rmr, i64 0, i64 %idxprom10\l  %add12 = add nsw i32 %run, 1\l  %idxprom13 = sext i32 %add12 to i64\l  %arrayidx14 = getelementptr inbounds [41 x float], [41 x float]*\l... %arrayidx11, i64 0, i64 %idxprom13\l  %0 = load float, float* %arrayidx14, align 4\l  %conv = fpext float %0 to double\l  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4\l... x i8]* @.str, i64 0, i64 0), double %conv)\l  br label %if.end\l}"];
	Node0x55edd0cdfa90 -> Node0x55edd0cdfae0;
	Node0x55edd0cdfae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{if.end:                                           \l  ret void\l}"];
}
