Writing '.classic.dot'...
Writing '.main.dot'...
warning: <stdin>: Function control flow change detected (hash mismatch) main Hash = 742261418966908927
classic begin
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %rem = srem i32 %i.0, 100
  %add2 = add nsw i32 %add, 1
  %add7 = add nsw i32 %add, 1
  %inc = add nsw i32 %i.0, 1
  %add9 = add nsw i32 %add, %div
  %add3 = add nsw i32 %add, %div
changed
for.inc
if.end11
if.then5
if.else8
if.end
new
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
if.then
new
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
  %add = add nsw i32 %i.0, 1
  %add2 = add nsw i32 %add, 1
if.else
new
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %add3 = add nsw i32 %add, %div
for.body
new
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %rem = srem i32 %i.0, 100
for.end
for.cond
new
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
entry
new
i32 0
changed
for.inc
new
  %inc = add nsw i32 %i.0, 1
if.end11
new
  %inc = add nsw i32 %i.0, 1
if.then5
new
  %inc = add nsw i32 %i.0, 1
  %add7 = add nsw i32 %add, 1
if.else8
new
  %inc = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %add9 = add nsw i32 %add, %div
if.end
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
new
  %inc = add nsw i32 %i.0, 1
  %add7 = add nsw i32 %add, 1
  %div = sdiv i32 %i.0, 2
  %add9 = add nsw i32 %add, %div
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
if.then
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
  %add = add nsw i32 %i.0, 1
  %add2 = add nsw i32 %add, 1
new
  %inc = add nsw i32 %i.0, 1
  %add7 = add nsw i32 %add, 1
  %div = sdiv i32 %i.0, 2
  %add9 = add nsw i32 %add, %div
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
if.else
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %add3 = add nsw i32 %add, %div
new
  %inc = add nsw i32 %i.0, 1
  %add7 = add nsw i32 %add, 1
  %div = sdiv i32 %i.0, 2
  %add9 = add nsw i32 %add, %div
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
for.body
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %rem = srem i32 %i.0, 100
for.cond
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
entry
i32 0
changed
for.inc
  %inc = add nsw i32 %i.0, 1
if.end11
  %inc = add nsw i32 %i.0, 1
if.then5
  %inc = add nsw i32 %i.0, 1
  %add7 = add nsw i32 %add, 1
if.else8
  %inc = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %add9 = add nsw i32 %add, %div
if.end
  %inc = add nsw i32 %i.0, 1
  %add7 = add nsw i32 %add, 1
  %div = sdiv i32 %i.0, 2
  %add9 = add nsw i32 %add, %div
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
if.then
  %inc = add nsw i32 %i.0, 1
  %add7 = add nsw i32 %add, 1
  %div = sdiv i32 %i.0, 2
  %add9 = add nsw i32 %add, %div
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
if.else
  %inc = add nsw i32 %i.0, 1
  %add7 = add nsw i32 %add, 1
  %div = sdiv i32 %i.0, 2
  %add9 = add nsw i32 %add, %div
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp4 = icmp sgt i32 %i.0, 90
avaiableOut for each Basic Block 
Block: for.end
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %cmp = icmp slt i32 %i.0, 100
Block: for.cond
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %cmp = icmp slt i32 %i.0, 100
Block: for.body
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %cmp = icmp slt i32 %i.0, 100
5   %add = add nsw i32 %i.0, 1
7   %div = sdiv i32 %i.0, 2
8   %rem = srem i32 %i.0, 100
9   %cmp1 = icmp eq i32 %rem, 1
Block: entry
Block: if.else
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %cmp = icmp slt i32 %i.0, 100
5   %add = add nsw i32 %i.0, 1
7   %div = sdiv i32 %i.0, 2
8   %rem = srem i32 %i.0, 100
9   %cmp1 = icmp eq i32 %rem, 1
13   %add3 = add nsw i32 %add, %div
15   %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add3)
Block: if.then
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %cmp = icmp slt i32 %i.0, 100
5   %add = add nsw i32 %i.0, 1
7   %div = sdiv i32 %i.0, 2
8   %rem = srem i32 %i.0, 100
9   %cmp1 = icmp eq i32 %rem, 1
10   %add2 = add nsw i32 %add, 1
Block: if.end
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %cmp = icmp slt i32 %i.0, 100
5   %add = add nsw i32 %i.0, 1
7   %div = sdiv i32 %i.0, 2
8   %rem = srem i32 %i.0, 100
9   %cmp1 = icmp eq i32 %rem, 1
12   %cmp4 = icmp sgt i32 %i.0, 90
Block: if.else8
3   %cmp = icmp slt i32 %i.0, 100
12   %cmp4 = icmp sgt i32 %i.0, 90
13   %add9 = add nsw i32 %add, %div
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
14   %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add9)
8   %rem = srem i32 %i.0, 100
7   %div = sdiv i32 %i.0, 2
5   %add = add nsw i32 %i.0, 1
9   %cmp1 = icmp eq i32 %rem, 1
Block: if.then5
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %cmp = icmp slt i32 %i.0, 100
5   %add = add nsw i32 %i.0, 1
7   %div = sdiv i32 %i.0, 2
8   %rem = srem i32 %i.0, 100
9   %cmp1 = icmp eq i32 %rem, 1
12   %cmp4 = icmp sgt i32 %i.0, 90
10   %add7 = add nsw i32 %add, 1
Block: for.inc
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %cmp = icmp slt i32 %i.0, 100
5   %add = add nsw i32 %i.0, 1
7   %div = sdiv i32 %i.0, 2
8   %rem = srem i32 %i.0, 100
9   %cmp1 = icmp eq i32 %rem, 1
12   %cmp4 = icmp sgt i32 %i.0, 90
Block: if.end11
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
3   %cmp = icmp slt i32 %i.0, 100
5   %add = add nsw i32 %i.0, 1
7   %div = sdiv i32 %i.0, 2
8   %rem = srem i32 %i.0, 100
9   %cmp1 = icmp eq i32 %rem, 1
12   %cmp4 = icmp sgt i32 %i.0, 90
anticipateIn for each Basic Block 
Block: for.end
Block: for.cond
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
Block: for.body
5   %inc = add nsw i32 %i.0, 1
7   %div = sdiv i32 %i.0, 2
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
12   %cmp4 = icmp sgt i32 %i.0, 90
8   %rem = srem i32 %i.0, 100
Block: entry
16 i32 0
Block: if.else
5   %inc = add nsw i32 %i.0, 1
10   %add7 = add nsw i32 %add, 1
7   %div = sdiv i32 %i.0, 2
13   %add9 = add nsw i32 %add, %div
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
12   %cmp4 = icmp sgt i32 %i.0, 90
Block: if.then
5   %inc = add nsw i32 %i.0, 1
10   %add7 = add nsw i32 %add, 1
7   %div = sdiv i32 %i.0, 2
13   %add9 = add nsw i32 %add, %div
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
12   %cmp4 = icmp sgt i32 %i.0, 90
Block: if.end
5   %inc = add nsw i32 %i.0, 1
10   %add7 = add nsw i32 %add, 1
7   %div = sdiv i32 %i.0, 2
13   %add9 = add nsw i32 %add, %div
1   %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
12   %cmp4 = icmp sgt i32 %i.0, 90
Block: if.else8
5   %inc = add nsw i32 %i.0, 1
7   %div = sdiv i32 %i.0, 2
13   %add9 = add nsw i32 %add, %div
Block: if.then5
5   %inc = add nsw i32 %i.0, 1
10   %add7 = add nsw i32 %add, 1
Block: for.inc
5   %inc = add nsw i32 %i.0, 1
Block: if.end11
5   %inc = add nsw i32 %i.0, 1
17
available out point of each value number0: 
1: if.end11 for.inc if.then5 if.else8 if.end if.then if.else for.body for.cond for.end 
2: 
3: if.end11 for.inc if.then5 if.else8 if.end if.then if.else for.body for.cond for.end 
4: 
5: if.end11 for.inc if.then5 if.else8 if.end if.then if.else for.body 
6: 
7: if.end11 for.inc if.then5 if.else8 if.end if.then if.else for.body 
8: if.end11 for.inc if.then5 if.else8 if.end if.then if.else for.body 
9: if.end11 for.inc if.then5 if.else8 if.end if.then if.else for.body 
10: if.then5 if.then 
11: 
12: if.end11 for.inc if.then5 if.else8 if.end 
13: if.else8 if.else 
14: if.else8 
15: if.else 
16: 
antipate in point of each value number0: 
1: if.end if.then if.else for.body for.cond 
2: 
3: 
4: 
5: if.end11 for.inc if.then5 if.else8 if.end if.then if.else for.body 
6: 
7: if.else8 if.end if.then if.else for.body 
8: for.body 
9: 
10: if.then5 if.end if.then if.else 
11: 
12: if.end if.then if.else for.body 
13: if.else8 if.end if.then if.else 
14: 
15: 
16: entry 
valunumber: 0
0				0				
0				0				
min cut from 0 to 1
valunumber: 1
entry to for.cond: 8 1.000000e+00
0				9				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
entry - for.cond
valunumber: 2
0				0				
0				0				
min cut from 0 to 1
valunumber: 3
0				0				
0				0				
min cut from 0 to 1
valunumber: 4
0				0				
0				0				
min cut from 0 to 1
valunumber: 5
for.cond to for.body: 256 9.687500e-01
0				249				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
for.cond - for.body
valunumber: 6
0				0				
0				0				
min cut from 0 to 1
valunumber: 7
for.cond to for.body: 256 9.687500e-01
0				249				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
for.cond - for.body
valunumber: 8
for.cond to for.body: 256 9.687500e-01
0				249				0				0				
0				0				0				2147483647				
2147483647				0				0				0				
0				0				0				0				
min cut from 2 to 3
for.cond - for.body
valunumber: 9
0				0				
0				0				
min cut from 0 to 1
valunumber: 10
if.end to if.then5: 248 5.000000e-01
if.else to if.end: 124 1.000000e+00
for.body to if.then: 248 5.000000e-01
for.body to if.else: 248 5.000000e-01
0				125				0				0				0				0				0				
0				0				0				0				0				0				2147483647				
125				0				0				0				0				0				0				
0				0				125				0				125				0				0				
0				0				0				0				0				0				2147483647				
0				0				0				2147483647				0				0				0				
0				0				0				0				0				0				0				
min cut from 5 to 6
for.body - if.else
for.body - if.then
valunumber: 11
0				0				
0				0				
min cut from 0 to 1
valunumber: 12
if.else to if.end: 124 1.000000e+00
if.then to if.end: 124 1.000000e+00
for.body to if.then: 248 5.000000e-01
for.body to if.else: 248 5.000000e-01
for.cond to for.body: 256 9.687500e-01
0				125				0				0				0				0				0				
0				0				0				0				0				0				2147483647				
0				125				0				0				0				0				0				
125				0				125				0				0				0				0				
0				0				0				249				0				0				0				
0				0				0				0				2147483647				0				0				
0				0				0				0				0				0				0				
min cut from 5 to 6
for.cond - for.body
valunumber: 13
if.end to if.else8: 248 5.000000e-01
if.then to if.end: 124 1.000000e+00
for.body to if.then: 248 5.000000e-01
for.body to if.else: 248 5.000000e-01
0				125				0				0				0				0				0				
0				0				0				0				0				0				2147483647				
125				0				0				0				0				0				0				
0				0				125				0				125				0				0				
0				0				0				0				0				0				2147483647				
0				0				0				2147483647				0				0				0				
0				0				0				0				0				0				0				
min cut from 5 to 6
for.body - if.then
for.body - if.else
valunumber: 14
0				0				
0				0				
min cut from 0 to 1
valunumber: 15
0				0				
0				0				
min cut from 0 to 1
valunumber: 16
0				0				
0				0				
min cut from 0 to 1
insert into if.then.split
available
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %rem = srem i32 %i.0, 100
  %cmp1 = icmp eq i32 %rem, 1
10 prepared
try   %add2 = add nsw i32 %add, 1
13 prepared
try   %add3 = add nsw i32 %add, %div

if.then.split:                                    ; preds = %for.body
  %OptInsert_add2 = add nsw i32 %add, 1
  %OptInsert_add3 = add nsw i32 %add, %div
  br label %if.then

insert into for.body.split
available
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
5 prepared
try   %inc = add nsw i32 %i.0, 1
7 prepared
try   %div = sdiv i32 %i.0, 2
8 prepared
try   %rem = srem i32 %i.0, 100
12 prepared
try   %cmp4 = icmp sgt i32 %i.0, 90

for.body.split:                                   ; preds = %for.cond
  %OptInsert_inc = add nsw i32 %i.0, 1
  %OptInsert_div = sdiv i32 %i.0, 2
  %OptInsert_rem = srem i32 %i.0, 100
  %OptInsert_cmp4 = icmp sgt i32 %i.0, 90
  br label %for.body

insert into if.else.split
available
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %rem = srem i32 %i.0, 100
  %cmp1 = icmp eq i32 %rem, 1
10 prepared
try   %add2 = add nsw i32 %add, 1
13 prepared
try   %add3 = add nsw i32 %add, %div

if.else.split:                                    ; preds = %for.body
  %OptInsert_add21 = add nsw i32 %add, 1
  %OptInsert_add32 = add nsw i32 %add, %div
  br label %if.else

insert into entry.split
available
1 prepared
try   %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]

entry.split:                                      ; preds = %entry
  br label %for.cond

if.else8 has dominance frontier:
if.end11 
if.then has dominance frontier:
if.end 
if.then5 has dominance frontier:
if.end11 
if.else.split has dominance frontier:
if.end 
if.else has dominance frontier:
if.end 
for.body.split has dominance frontier:
for.cond 
for.body has dominance frontier:
for.cond 
if.end has dominance frontier:
for.cond 
if.end11 has dominance frontier:
for.cond 
if.then.split has dominance frontier:
if.end 
for.inc has dominance frontier:
for.cond 
12 in newValueSet
  %OptInsert_cmp4 = icmp sgt i32 %i.0, 90
12 in newDefined
  %OptInsert_cmp4 = icmp sgt i32 %i.0, 90
8 in newValueSet
  %OptInsert_rem = srem i32 %i.0, 100
8 in newDefined
  %OptInsert_rem = srem i32 %i.0, 100
7 in newValueSet
  %OptInsert_div = sdiv i32 %i.0, 2
7 in newDefined
  %OptInsert_div = sdiv i32 %i.0, 2
5 in newValueSet
  %OptInsert_inc = add nsw i32 %i.0, 1
5 in newDefined
  %OptInsert_inc = add nsw i32 %i.0, 1

if.end:                                           ; preds = %if.else, %if.then
  %NewPhi_OptInsert_add3 = phi i32 
  %cmp4 = icmp sgt i32 %i.0, 90
  br i1 %cmp4, label %if.then5, label %if.else8
13 in newValueSet
  %OptInsert_add3 = add nsw i32 %add, %div
  %OptInsert_add32 = add nsw i32 %add, %div
  %NewPhi_OptInsert_add3 = phi i32 
13 in newDefined
  %OptInsert_add3 = add nsw i32 %add, %div
  %OptInsert_add32 = add nsw i32 %add, %div
  %NewPhi_OptInsert_add3 = phi i32 

if.end:                                           ; preds = %if.else, %if.then
  %NewPhi_OptInsert_add3 = phi i32 
  %NewPhi_OptInsert_add2 = phi i32 
  %cmp4 = icmp sgt i32 %i.0, 90
  br i1 %cmp4, label %if.then5, label %if.else8
10 in newValueSet
  %OptInsert_add2 = add nsw i32 %add, 1
  %OptInsert_add21 = add nsw i32 %add, 1
  %NewPhi_OptInsert_add2 = phi i32 
10 in newDefined
  %OptInsert_add2 = add nsw i32 %add, 1
  %OptInsert_add21 = add nsw i32 %add, 1
  %NewPhi_OptInsert_add2 = phi i32 
revNewValue
10:   %NewPhi_OptInsert_add2 = phi i32 
10:   %OptInsert_add21 = add nsw i32 %add, 1
10:   %OptInsert_add2 = add nsw i32 %add, 1
13:   %NewPhi_OptInsert_add3 = phi i32 
13:   %OptInsert_add32 = add nsw i32 %add, %div
13:   %OptInsert_add3 = add nsw i32 %add, %div
5:   %OptInsert_inc = add nsw i32 %i.0, 1
7:   %OptInsert_div = sdiv i32 %i.0, 2
8:   %OptInsert_rem = srem i32 %i.0, 100
12:   %OptInsert_cmp4 = icmp sgt i32 %i.0, 90
rename: entry
  br label %entry.split
fill in phi

entry.split:                                      ; preds = %entry
  br label %for.cond
rename: entry.split
  br label %for.cond
fill in phi

for.cond:                                         ; preds = %for.inc, %entry.split
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
  br i1 %cmp, label %for.body.split, label %for.end
  %inc = add nsw i32 %i.0, 1
rename: for.cond
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  br i1 %cmp, label %for.body.split, label %for.end
  %cmp = icmp slt i32 %i.0, 100
fill in phi

for.body.split:                                   ; preds = %for.cond
  %OptInsert_inc = add nsw i32 %i.0, 1
  %OptInsert_div = sdiv i32 %i.0, 2
  %OptInsert_rem = srem i32 %i.0, 100
  %OptInsert_cmp4 = icmp sgt i32 %i.0, 90
  br label %for.body

for.end:                                          ; preds = %for.cond
  ret void
rename: for.body.split
  %OptInsert_inc = add nsw i32 %i.0, 1
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  %OptInsert_div = sdiv i32 %i.0, 2
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  %OptInsert_rem = srem i32 %i.0, 100
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  %OptInsert_cmp4 = icmp sgt i32 %i.0, 90
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  br label %for.body
fill in phi

for.body:                                         ; preds = %for.body.split
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %rem = srem i32 %i.0, 100
  %cmp1 = icmp eq i32 %rem, 1
  br i1 %cmp1, label %if.then.split, label %if.else.split
rename: for.body
  %add = add nsw i32 %i.0, 1
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  %div = sdiv i32 %i.0, 2
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  %rem = srem i32 %i.0, 100
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  %cmp1 = icmp eq i32 %rem, 1
  %rem = srem i32 %i.0, 100
  br i1 %cmp1, label %if.then.split, label %if.else.split
  %cmp1 = icmp eq i32 %OptInsert_rem, 1
fill in phi

if.then.split:                                    ; preds = %for.body
  %OptInsert_add2 = add nsw i32 %add, 1
  %OptInsert_add3 = add nsw i32 %add, %div
  br label %if.then

if.else.split:                                    ; preds = %for.body
  %OptInsert_add21 = add nsw i32 %add, 1
  %OptInsert_add32 = add nsw i32 %add, %div
  br label %if.else
rename: if.then.split
  %OptInsert_add2 = add nsw i32 %add, 1
  %add = add nsw i32 %i.0, 1
  %OptInsert_add3 = add nsw i32 %add, %div
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  br label %if.then
fill in phi

if.then:                                          ; preds = %if.then.split
  %add2 = add nsw i32 %add, 1
  br label %if.end
rename: if.then
  %add2 = add nsw i32 %add, 1
  %add = add nsw i32 %i.0, 1
  br label %if.end
fill in phi

if.end:                                           ; preds = %if.else, %if.then
  %NewPhi_OptInsert_add3 = phi i32 
  %NewPhi_OptInsert_add2 = phi i32 
  %cmp4 = icmp sgt i32 %i.0, 90
  br i1 %cmp4, label %if.then5, label %if.else8
  %NewPhi_OptInsert_add3 = phi i32 [ %OptInsert_add3, %if.then ]
  %NewPhi_OptInsert_add2 = phi i32 [ %OptInsert_add2, %if.then ]
rename: if.end
  %NewPhi_OptInsert_add3 = phi i32 [ %OptInsert_add3, %if.then ]
  %NewPhi_OptInsert_add2 = phi i32 [ %OptInsert_add2, %if.then ]
  %cmp4 = icmp sgt i32 %i.0, 90
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  br i1 %cmp4, label %if.then5, label %if.else8
  %cmp4 = icmp sgt i32 %i.0, 90
fill in phi

if.then5:                                         ; preds = %if.end
  %add7 = add nsw i32 %add, 1
  br label %if.end11

if.else8:                                         ; preds = %if.end
  %add9 = add nsw i32 %add, %div
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add9)
  br label %if.end11
rename: if.then5
  %add7 = add nsw i32 %add, 1
  %add = add nsw i32 %i.0, 1
  br label %if.end11
fill in phi

if.end11:                                         ; preds = %if.else8, %if.then5
  br label %for.inc
rename: if.end11
  br label %for.inc
fill in phi

for.inc:                                          ; preds = %if.end11
  %inc = add nsw i32 %i.0, 1
  br label %for.cond, !llvm.loop !31
rename: for.inc
  %inc = add nsw i32 %i.0, 1
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  br label %for.cond, !llvm.loop !31
fill in phi

for.cond:                                         ; preds = %for.inc, %entry.split
  %i.0 = phi i32 [ 0, %entry.split ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
  br i1 %cmp, label %for.body.split, label %for.end
  %inc = add nsw i32 %i.0, 1
rename: if.else8
  %add9 = add nsw i32 %add, %div
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add9)
  %add9 = add nsw i32 %OptInsert_inc, %OptInsert_div
  br label %if.end11
fill in phi

if.end11:                                         ; preds = %if.else8, %if.then5
  br label %for.inc
rename: if.else.split
  %OptInsert_add21 = add nsw i32 %add, 1
  %add = add nsw i32 %i.0, 1
  %OptInsert_add32 = add nsw i32 %add, %div
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  br label %if.else
fill in phi

if.else:                                          ; preds = %if.else.split
  %add3 = add nsw i32 %add, %div
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add3)
  br label %if.end
rename: if.else
  %add3 = add nsw i32 %add, %div
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %add3)
  %add3 = add nsw i32 %OptInsert_inc, %OptInsert_div
  br label %if.end
fill in phi

if.end:                                           ; preds = %if.else, %if.then
  %NewPhi_OptInsert_add3 = phi i32 [ %OptInsert_add3, %if.then ]
  %NewPhi_OptInsert_add2 = phi i32 [ %OptInsert_add2, %if.then ]
  %cmp4 = icmp sgt i32 %i.0, 90
  br i1 %OptInsert_cmp4, label %if.then5, label %if.else8
  %NewPhi_OptInsert_add3 = phi i32 [ %OptInsert_add3, %if.then ], [ %OptInsert_add32, %if.else ]
  %NewPhi_OptInsert_add2 = phi i32 [ %OptInsert_add2, %if.then ], [ %OptInsert_add21, %if.else ]
rename: for.end
  ret void
fill in phi

entry:
  br label %entry.split


entry.split:                                      ; preds = %entry
  br label %for.cond


for.cond:                                         ; preds = %for.inc, %entry.split
  %i.0 = phi i32 [ 0, %entry.split ], [ %OptInsert_inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
  br i1 %cmp, label %for.body.split, label %for.end


for.body.split:                                   ; preds = %for.cond
  %OptInsert_inc = add nsw i32 %i.0, 1
  %OptInsert_div = sdiv i32 %i.0, 2
  %OptInsert_rem = srem i32 %i.0, 100
  %OptInsert_cmp4 = icmp sgt i32 %i.0, 90
  br label %for.body


for.body:                                         ; preds = %for.body.split
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %rem = srem i32 %i.0, 100
  %cmp1 = icmp eq i32 %OptInsert_rem, 1
  br i1 %cmp1, label %if.then.split, label %if.else.split


if.then.split:                                    ; preds = %for.body
  %OptInsert_add2 = add nsw i32 %OptInsert_inc, 1
  %OptInsert_add3 = add nsw i32 %OptInsert_inc, %OptInsert_div
  br label %if.then


if.then:                                          ; preds = %if.then.split
  %add2 = add nsw i32 %OptInsert_inc, 1
  br label %if.end


if.else.split:                                    ; preds = %for.body
  %OptInsert_add21 = add nsw i32 %OptInsert_inc, 1
  %OptInsert_add32 = add nsw i32 %OptInsert_inc, %OptInsert_div
  br label %if.else


if.else:                                          ; preds = %if.else.split
  %add3 = add nsw i32 %OptInsert_inc, %OptInsert_div
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %OptInsert_add32)
  br label %if.end


if.end:                                           ; preds = %if.else, %if.then
  %NewPhi_OptInsert_add3 = phi i32 [ %OptInsert_add3, %if.then ], [ %OptInsert_add32, %if.else ]
  %NewPhi_OptInsert_add2 = phi i32 [ %OptInsert_add2, %if.then ], [ %OptInsert_add21, %if.else ]
  %cmp4 = icmp sgt i32 %i.0, 90
  br i1 %OptInsert_cmp4, label %if.then5, label %if.else8


if.then5:                                         ; preds = %if.end
  %add7 = add nsw i32 %OptInsert_inc, 1
  br label %if.end11


if.else8:                                         ; preds = %if.end
  %add9 = add nsw i32 %OptInsert_inc, %OptInsert_div
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %NewPhi_OptInsert_add3)
  br label %if.end11


if.end11:                                         ; preds = %if.else8, %if.then5
  br label %for.inc


for.inc:                                          ; preds = %if.end11
  %inc = add nsw i32 %i.0, 1
  br label %for.cond, !llvm.loop !31


for.end:                                          ; preds = %for.cond
  ret void

entry
  br label %entry.split
entry.split
  br label %for.cond
for.cond
  %i.0 = phi i32 [ 0, %entry.split ], [ %OptInsert_inc, %for.inc ]
  %i.0 = phi i32 [ 0, %entry.split ], [ %OptInsert_inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 100
  br i1 %cmp, label %for.body.split, label %for.end
for.body.split
  %OptInsert_inc = add nsw i32 %i.0, 1
  %OptInsert_div = sdiv i32 %i.0, 2
  %OptInsert_rem = srem i32 %i.0, 100
  %OptInsert_cmp4 = icmp sgt i32 %i.0, 90
  br label %for.body
for.body
  %add = add nsw i32 %i.0, 1
  %div = sdiv i32 %i.0, 2
  %rem = srem i32 %i.0, 100
  %cmp1 = icmp eq i32 %OptInsert_rem, 1
  br i1 %cmp1, label %if.then.split, label %if.else.split
if.then.split
  %OptInsert_add2 = add nsw i32 %OptInsert_inc, 1
  %OptInsert_add3 = add nsw i32 %OptInsert_inc, %OptInsert_div
  br label %if.then
if.then
  %add2 = add nsw i32 %OptInsert_inc, 1
  br label %if.end
if.else.split
  %OptInsert_add21 = add nsw i32 %OptInsert_inc, 1
  %OptInsert_add32 = add nsw i32 %OptInsert_inc, %OptInsert_div
  br label %if.else
if.else
  %add3 = add nsw i32 %OptInsert_inc, %OptInsert_div
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %OptInsert_add32)
  br label %if.end
if.end
  %NewPhi_OptInsert_add3 = phi i32 [ %OptInsert_add3, %if.then ], [ %OptInsert_add32, %if.else ]
  %NewPhi_OptInsert_add3 = phi i32 [ %OptInsert_add3, %if.then ], [ %OptInsert_add32, %if.else ]
  %NewPhi_OptInsert_add2 = phi i32 [ %OptInsert_add2, %if.then ], [ %OptInsert_add21, %if.else ]
  %NewPhi_OptInsert_add2 = phi i32 [ %OptInsert_add2, %if.then ], [ %OptInsert_add21, %if.else ]
  %cmp4 = icmp sgt i32 %i.0, 90
  br i1 %OptInsert_cmp4, label %if.then5, label %if.else8
if.then5
  %add7 = add nsw i32 %OptInsert_inc, 1
  br label %if.end11
if.else8
  %add9 = add nsw i32 %OptInsert_inc, %OptInsert_div
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %NewPhi_OptInsert_add3)
  br label %if.end11
if.end11
  br label %for.inc
for.inc
  %inc = add nsw i32 %i.0, 1
  br label %for.cond, !llvm.loop !31
for.end
  ret void
main begin
changed
entry
avaiableOut for each Basic Block 
Block: entry
1   call void @classic()
anticipateIn for each Basic Block 
Block: entry
2
available out point of each value number0: 
1: entry 
antipate in point of each value number0: 
1: 
valunumber: 0
0				0				
0				0				
min cut from 0 to 1
valunumber: 1
0				0				
0				0				
min cut from 0 to 1
revNewValue
rename: entry
  call void @classic()
  ret i32 0
fill in phi

entry:
  call void @classic()
  ret i32 0

entry
  call void @classic()
  ret i32 0
Writing '.classic.dot'...
Writing '.main.dot'...
Writing '.classic.dot'...
Writing '.main.dot'...

entry:
  br label %for.cond

for.cond:                                         ; preds = %if.end11, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %OptInsert_inc, %if.end11 ]
  %cmp = icmp slt i32 %i.0, 100
  br i1 %cmp, label %for.body.split, label %for.end

for.body.split:                                   ; preds = %for.cond
  %OptInsert_inc = add nsw i32 %i.0, 1
  %OptInsert_div = sdiv i32 %i.0, 2
  %OptInsert_rem = srem i32 %i.0, 100
  %OptInsert_cmp4 = icmp sgt i32 %i.0, 90
  %0 = icmp eq i32 %OptInsert_rem, 1
  br i1 %0, label %if.then.split, label %if.else.split

if.then.split:                                    ; preds = %for.body.split
  %OptInsert_add3 = add nsw i32 %OptInsert_inc, %OptInsert_div
  br label %if.end

if.else.split:                                    ; preds = %for.body.split
  %OptInsert_add32 = add nsw i32 %OptInsert_inc, %OptInsert_div
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %OptInsert_add32)
  br label %if.end

if.end:                                           ; preds = %if.else.split, %if.then.split
  %NewPhi_OptInsert_add3 = phi i32 [ %OptInsert_add3, %if.then.split ], [ %OptInsert_add32, %if.else.split ]
  br i1 %OptInsert_cmp4, label %if.then5, label %if.else8

if.then5:                                         ; preds = %if.end
  br label %if.end11

if.else8:                                         ; preds = %if.end
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %NewPhi_OptInsert_add3)
  br label %if.end11

if.end11:                                         ; preds = %if.else8, %if.then5
  br label %for.cond, !llvm.loop !31

for.end:                                          ; preds = %for.cond
  ret void

entry:
  call void @classic()
  ret i32 0
Writing '.classic.dot'...
Writing '.main.dot'...
rm: cannot remove '.': Is a directory
rm: cannot remove '..': Is a directory
